@page "/debug"

@using MechKineticsArtSoftware.Data
@using System.IO;
@using ElectronNET.API.Entities
@using ElectronNET.API;
@inject LogWriter logger
@inject ConfigManager configmgr
@inject IStringLocalizer<Controller> localizer
@inject IJSRuntime JSRuntime;
@inject WebAPIManage apidata
@implements IAsyncDisposable

<h1>Debug</h1>

<div>
    <div class="form-group">
        <h3>@localizer["logs"]</h3>
        <textarea class="form-control logtext" @bind="@logtext" rows="6" @ref="logarea_ref" readonly>Log Text</textarea>
    </div>

    <div>
        <h3>BoardInfo</h3>
        @for (int i = 0; i < configmgr.configData.num_board_group; i++)
        {
            <div>
                <h4>Board Group @i</h4>
                <div>
                    <h5>Network</h5>
                    <div>
                        <h6>Connection</h6>
                        <div>@apidata.GetBoardFromIndex(i).webAPI.is_connected</div>
                    </div>
                    <div>
                        <h6>IP address</h6>
                        <div>@apidata.GetBoardFromIndex(i).webAPI.url</div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div>
        <h3>SystemInfo</h3>
        <div>
            <h5>OS</h5>
            <div>@os.Platform</div>
        </div>
        <div>
            <h5>Current Directory</h5>
            <div>@Environment.CurrentDirectory</div>
        </div>
        <div>
            <h5>AppDatas Directory</h5>
            <div>@configmgr.userDataPath</div>
            @if (isWin)
            {
                <button class="btn btn-secondary" @onclick="(e => OpenDirectoryOnWindows(configmgr.userDataPath))">Open</button>
            }
        </div>
        <div>
            <h5>Output NC Directory</h5>
            <div>@configmgr.ncDataPath</div>
            @if (isWin)
            {
                <button class="btn btn-secondary" @onclick="(e => OpenDirectoryOnWindows(configmgr.ncDataPath))">Open</button>
            }
        </div>
        <div>
            <h5>Log Directory</h5>
            <div>@configmgr.logDataPath</div>
            @if (isWin)
            {
                <button class="btn btn-secondary" @onclick="(e => OpenDirectoryOnWindows(configmgr.ncDataPath))">Open</button>
            }
        </div>
    </div>
</div>

@code {
    string logtext = "";
    private System.Threading.Timer timer;
    private ElementReference logarea_ref;
    private OperatingSystem os;
    bool isWin = false;
    bool isMac = false;
    bool isLinux = false;

    protected override async Task OnInitializedAsync()
    {
        os = Environment.OSVersion;
        isWin = OperatingSystem.IsWindows();
        isMac = OperatingSystem.IsMacOS();
        isLinux = OperatingSystem.IsLinux();

        // Refresh log text

        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            logtext = logger.text;
            try
            {
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                logger.WriteLogln($"Update event miss:{e.Message}");
            }
        }, new System.Threading.AutoResetEvent(false), 0, configmgr.configData.position_update_interval / 2); // fire half of update time

        await base.OnInitializedAsync();

    }

    public ValueTask DisposeAsync()
    {
        return timer?.DisposeAsync() ?? ValueTask.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await JSRuntime.InvokeVoidAsync("scrollTextareaToBottom", logarea_ref);

    }

    void OpenDirectoryOnWindows(string filepath)
    {
        try {
            System.Diagnostics.Process.Start("explorer.exe", filepath);
        }
        catch (Exception e)
        {
            logger.WriteLogln(filepath + " : " + e.Message);

        }
    }
}
